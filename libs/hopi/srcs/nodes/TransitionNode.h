//
// Created by Theophile Champion on 28/11/2020.
//

#ifndef HOMING_PIGEON_2_TRANSITION_NODE_H
#define HOMING_PIGEON_2_TRANSITION_NODE_H

#include "FactorNode.h"
#include "api/Aliases.h"
#include <torch/torch.h>
#include <memory>

namespace hopi::nodes {
    class VarNode;
}

namespace hopi::nodes {

    /**
     * Class representing a factor node corresponding to an Transition distribution.
     */
    class TransitionNode : public FactorNode {
    public:
        //
        // Factories
        //

        /**
         * Create a Transition factor node, i.e., representing the distribution P(to|from,param).
         * @param from the hidden variable on which the transition is conditioned upon, typically a hidden state
         * @param to the generated random variable
         * @param param the transition's parameters, i.e., a random matrix distributed according to a Dirichlet
         * @return the created factor node
         */
        static std::unique_ptr<TransitionNode> create(RV *from, RV *to, RV *param);

        /**
         * Create a Transition factor node, i.e., representing the distribution P(to|from).
         * @param from the hidden variable on which the transition is conditioned upon, typically a hidden state
         * @param to the generated random variable
         * @return the created factor node
         */
        static std::unique_ptr<TransitionNode> create(RV *from, RV *to);

    public:
        //
        // Constructors
        //

        /**
         * Construct a Transition factor node, i.e., representing the distribution P(to|from,param).
         * @param from the hidden variable on which the transition is conditioned upon, typically a hidden state
         * @param to the generated random variable
         * @param param the transition's parameters, i.e., a random matrix distributed according to param Dirichlet
         * @return the created factor node
         */
        TransitionNode(VarNode *from, VarNode *to, VarNode *param);

        /**
         * Construct a Transition factor node, i.e., representing the distribution P(to|from).
         * @param from the hidden variable on which the transition is conditioned upon, typically a hidden state
         * @param to the generated random variable
         * @return the created factor node
         */
        TransitionNode(VarNode *from, VarNode *to);

        //
        // Implement the methods of the FactorNode class
        //

        /**
         * Getter.
         * @param i the index of the parent that must be returned
         * @return the i-the parent of the factor
         */
        VarNode *parent(int i) override;

        /**
         * Getter.
         * @return the child of the factor, i.e., the random variable generated by the factor.
         */
        VarNode *child() override;

        /**
         * Compute the message towards a specific node
         * @param to the node toward which the message is sent
         * @return the message
         */
        torch::Tensor message(VarNode *to) override;

        /**
         * Compute the Variational Free Energy (VFE) of the factor
         * @return the VFE
         */
        double vfe() override;

    private:
        /**
         * Getter.
         * @return the message towards the generated random variable.
         */
        torch::Tensor toMessage();

        /**
         * Getter.
         * @return the message towards the hidden state upon which the Transition is conditioned.
         */
        torch::Tensor fromMessage();

        /**
         * Getter.
         * @return the message towards the random variable representing the parameters of the Transition.
         */
        torch::Tensor aMessage();

        /**
         * Getter.
         * @return if the parameters are distributed according to a Dirichlet, then the expected logarithm of the
         * parameters, otherwise the logarithm of the parameters.
         */
        torch::Tensor getLogA();

    private:
        VarNode *from;
        VarNode *to;
        VarNode *A;
    };

}

#endif //HOMING_PIGEON_2_TRANSITION_NODE_H
