//
// Created by Theophile Champion on 06/01/2021.
//

#ifndef HOMING_PIGEON_DIRICHLET_NODE_H
#define HOMING_PIGEON_DIRICHLET_NODE_H

#include "FactorNode.h"
#include "api/API.h"
#include <memory>

namespace hopi::nodes {
    class VarNode;
}

namespace hopi::nodes {

    /**
     * Class representing a factor node corresponding to an Dirichlet distribution.
     */
    class DirichletNode : public FactorNode {
    public:
        //
        // Factory
        //

        /**
         * Create a Dirichlet factor node, i.e., a node representing P(node) = Dir(node;param)
         * @param node the random tensor generated by the Dirichlet distribution
         * @return the created factor node
         */
        static std::unique_ptr<DirichletNode> create(RV *node);

    public:
        //
        // Constructor
        //

        /**
         * Construct a Dirichlet factor node, i.e., a node representing P(node) = Dir(node;param)
         * @param node the random tensor generated by the Dirichlet distribution
         */
        explicit DirichletNode(VarNode *node);

        //
        // Implement the methods of the FactorNode class
        //

        /**
         * Getter.
         * @param i the index of the parent that must be returned
         * @return the i-the parent of the factor
         */
        VarNode *parent(int i) override;

        /**
         * Getter.
         * @return the child of the factor, i.e., the random variable generated by the factor.
         */
        VarNode *child() const override;

        /**
         * Compute the message towards a specific node
         * @param to the node toward which the message is sent
         * @return the message
         */
        torch::Tensor message(VarNode *to) override;

        /**
         * Compute the Variational Free Energy (VFE) of the factor
         * @return the VFE
         */
        double vfe() override;

    private:
        /**
         * Compute the energy of the factor.
         * @param prior parameters of the prior distribution
         * @param post parameters of the posterior distribution
         * @return the energy of the factor
         */
        static double energy(const torch::Tensor &prior, const torch::Tensor &post);

        /**
         * Getter.
         * @return the message toward the generated random variable.
         */
        torch::Tensor childMessage();

    private:
        VarNode *childNode;
    };

}

#endif //HOMING_PIGEON_DIRICHLET_NODE_H
